{"ast":null,"code":"/**\n * @author Chang Xu\n * @email xu.chang1@northeastern.edu\n * @create date 2021-04-22 23:38:38\n * @modify date 2021-04-23 00:06:32\n */\nimport Axios from 'axios';\nimport { ACTION_TYPES } from './actionConstants'; // const simple_action = {\n//   type: \"\",\n//   payload: {\n//   }\n// }\n\nexport const ACTIONS = {\n  updateLocalPosts: posts => ({\n    type: ACTION_TYPES.GET_POSTS,\n    payload: {\n      posts\n    }\n  }),\n  getPosts: () => {\n    return dispatch => {\n      Axios.get(\"/api/posts\").then(res => {\n        console.log(\"Getting all posts done.\");\n        console.log(res.data);\n        dispatch(ACTIONS.updateLocalPosts(res.data));\n      }).catch(error => console.log(error));\n    };\n  },\n  addPost: post => {\n    return dispatch => {\n      Axios.post(\"/api/posts\", post).then(res => {\n        console.log(`Post and new post id is ${res.data}`);\n        Axios.get(\"api/posts\").then(res => {\n          console.log(\"GET after POST\");\n          console.log(res.data);\n          dispatch(ACTIONS.updateLocalPosts(res.data));\n        }).catch(error => console.log(error));\n      }).catch(error => console.log(error));\n    };\n  },\n  login: username => ({\n    type: ACTION_TYPES.LOGIN,\n    payload: {\n      username\n    }\n  }),\n  updateErrMsg: message => ({\n    type: ACTION_TYPES.UPDATE_ERR_MSG,\n    payload: {\n      errMsg: message\n    }\n  }),\n  // only dispatched when first loading the app, e.g. refresh the page.\n  initLogin: () => {\n    return dispatch => {\n      Axios.post(\"/api/users/login\", {}).then(res => {\n        if (res.data.loggedIn) {\n          console.log(res.data.message);\n          dispatch(ACTIONS.login(res.data.username));\n        }\n      }).catch(error => {\n        console.log(error.response.status);\n        console.log(error.response.data);\n        dispatch(ACTIONS.updateErrMsg(error.response.data.message));\n      });\n    };\n  },\n  // login with username and password\n  regularLogin: (username, password) => {\n    return dispatch => {\n      Axios.post(\"/api/users/login\", {\n        username: username,\n        password: password\n      }).then(res => {\n        if (res.data.loggedIn) {\n          console.log(res.data.message);\n          dispatch(ACTIONS.login(res.data.username));\n        }\n      }).catch(error => {\n        console.log(error.response.status);\n        console.log(error.response.data);\n        dispatch(ACTIONS.updateErrMsg(error.response.data.message));\n      });\n    };\n  }\n};","map":{"version":3,"sources":["/Users/cheryl/CS5610/gitRepo/antoinette-cheryl-chang-xu-zitao-shen-assignment3/backend-demo/src/redux/actions.js"],"names":["Axios","ACTION_TYPES","ACTIONS","updateLocalPosts","posts","type","GET_POSTS","payload","getPosts","dispatch","get","then","res","console","log","data","catch","error","addPost","post","login","username","LOGIN","updateErrMsg","message","UPDATE_ERR_MSG","errMsg","initLogin","loggedIn","response","status","regularLogin","password"],"mappings":"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","sourcesContent":["/**\n * @author Chang Xu\n * @email xu.chang1@northeastern.edu\n * @create date 2021-04-22 23:38:38\n * @modify date 2021-04-23 00:06:32\n */\nimport Axios from 'axios';\nimport { ACTION_TYPES } from './actionConstants';\n\n// const simple_action = {\n//   type: \"\",\n//   payload: {\n\n//   }\n// }\n\nexport const ACTIONS = {\n\n  updateLocalPosts: (posts) => ({type: ACTION_TYPES.GET_POSTS, payload: {posts}}),\n\n  getPosts: () => {\n\n    return dispatch => {\n\n      Axios.get(\"/api/posts\")\n      .then(res => {\n        console.log(\"Getting all posts done.\")\n        console.log(res.data);\n        dispatch(ACTIONS.updateLocalPosts(res.data))\n      })\n      .catch(error => console.log(error));\n\n    }\n\n  },\n\n  addPost: (post) => {\n\n    return dispatch => {\n      Axios.post(\"/api/posts\", post)\n      .then((res) => {\n        console.log(`Post and new post id is ${res.data}`);\n        Axios.get(\"api/posts\")\n        .then(res => {\n          console.log(\"GET after POST\")\n          console.log(res.data);\n          dispatch(ACTIONS.updateLocalPosts(res.data));\n        })\n        .catch(error => console.log(error))\n      })\n      .catch(error => console.log(error));\n    }\n\n  },\n\n  login: (username) => ({type: ACTION_TYPES.LOGIN, payload: {username}}),\n\n  updateErrMsg: (message) => ({type: ACTION_TYPES.UPDATE_ERR_MSG, payload: {errMsg: message}}),\n\n  // only dispatched when first loading the app, e.g. refresh the page.\n  initLogin: () => {\n    return dispatch => {\n      Axios.post(\"/api/users/login\", {})\n      .then(res => {\n        if(res.data.loggedIn){\n          console.log(res.data.message);\n          dispatch(ACTIONS.login(res.data.username));\n        }\n      })\n      .catch(error => {\n        console.log(error.response.status);\n        console.log(error.response.data);\n        dispatch(ACTIONS.updateErrMsg(error.response.data.message));\n      })\n    }\n  },\n\n  // login with username and password\n  regularLogin: (username, password) => {\n    return dispatch => {\n      Axios.post(\"/api/users/login\", {username: username, password: password})\n      .then(res => {\n        if(res.data.loggedIn){\n          console.log(res.data.message);\n          dispatch(ACTIONS.login(res.data.username));\n        }\n      })\n      .catch(error => {\n        console.log(error.response.status);\n        console.log(error.response.data);\n        dispatch(ACTIONS.updateErrMsg(error.response.data.message));\n      })\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}